[["index.html", "Tutorial of RNA-seq tumor immunity analysis Chapter 1 About this tutorial 1.1 Installation 1.2 Pre-built reference data", " Tutorial of RNA-seq tumor immunity analysis 2021-04-23 Chapter 1 About this tutorial This is a tutorial about integrative computing analysis of tumor immunity using bulk RNA-seq data. We will focus on the inferring the immune infiltration, immune repertoire, immune response and neoantigen prediction from gene expression profile. We developed a RNA-seq immune analysis pipeline named RIMA that is available at https://github.com/liulab-dfci/RIMA/. 1.1 Installation 1.2 Pre-built reference data "],["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction Tumor RNA-seq has become an important technique for molecular profiling and immune characterization of tumors. RNA-seq Immune Analysis performs integrative computational modeling of tumor microenvironment from bulk tumor RNA-seq data, which has the potential to offer essential insights to cancer immunology and immune-oncology studies. Figure 2.1: Flowchat of RIMA pipeline The pre-processing module includes four main procedures: Read mapping Quality control Gene quantification Batch effect removal The downstream analysis includes seven modules: Differential expression analysis Immune infiltration estimation Immune repertoire inference Neoantigen detection Microbiome characterization Immunotherapy response prediction Gene fusion Microbiome "],["Preprocessing.html", "Chapter 3 Pre-processing of bulk RNA-seq data 3.1 Read Mapping 3.2 Quality Control 3.3 Gene quantification 3.4 Batch effect removal 3.5 Video demo of RIMA", " Chapter 3 Pre-processing of bulk RNA-seq data In this chapter, we will introduce how we align RNA-seq data, check the data quality, quantify gene expression and handle batch effects across samples. 3.1 Read Mapping 3.1.1 STAR STAR is one of the most common tools used for bulk RNA-seq data alignment to generate transcriptome BAM or genomic BAM output, which can be downloaded at here. A tutorial of runing STAR is available at here. Once you have installed STAR, the first step is to create genome index. In our RIMA pipeline, we download the human genome (hg38) STAR index from Genomic Data Commons (GDC) . To run STAR of a sample: STAR --runThreadN 4 --genomeDir /path/to/index --outReadsUnmapped None --chimSegmentMin 12 #generate Chimeric and circulate alignment --outSAMunmapped Within --outSAMtype BAM SortedByCoordinate --readFilesIn sample_1.fastq.gz sample_2.fastq.gz --readFilesCommand zcat --outFileNamePrefix sample --quantMode TranscriptomeSAM GeneCounts # generate outputs in transcript coordinates and mapped read counts per gene Example outputs: sampleAligned.sortedByCoord.out.bam sampleAligned.toTranscriptome.out.bam sampleReadsPerGene.out.tab sampleChimeric.out.junction sampleLog.final.out Then we use samtools to generate statistics of alignment BAM file: samtools stats sampleAligned.sortedByCoord.out.bam | grep ^SN | cut -f 2- &gt; sample.sorted.bam.stat.txt Example output of BAM summary: raw total sequences: 60589702 filtered sequences: 0 sequences: 60589702 is sorted: 1 1st fragments: 30294851 last fragments: 30294851 reads mapped: 59963698 reads mapped and paired: 59963698 # paired-end technology bit set + both mates mapped reads unmapped: 626004 reads properly paired: 59963698 # proper-pair bit set reads paired: 60589702 # paired-end technology bit set reads duplicated: 0 # PCR or optical duplicate bit set reads MQ0: 110872 # mapped and MQ=0 reads QC failed: 0 non-primary alignments: 3102614 total length: 6058970200 # ignores clipping total first fragment length: 3029485100 # ignores clipping total last fragment length: 3029485100 # ignores clipping bases mapped: 5996369800 # ignores clipping bases mapped (cigar): 5952761135 # more accurate bases trimmed: 0 bases duplicated: 0 mismatches: 0 # from NM fields error rate: 0.000000e+00 # mismatches / bases mapped (cigar) average length: 100 average first fragment length: 100 average last fragment length: 100 maximum length: 100 maximum first fragment length: 100 maximum last fragment length: 100 average quality: 39.7 insert size average: 971.3 insert size standard deviation: 1899.5 inward oriented pairs: 29281286 outward oriented pairs: 700563 pairs with other orientation: 0 pairs on different chromosomes: 0 3.2 Quality Control RseQC is a standard tool for checking the quality of reads alignment, providing principal measurements of RNA-seq data quality. RseQC tutorial is available at here. To reduce running time, we first subsampled the BAM file and use only housekeeping genes for quality check using RseQC. ## Example of subsampling 50% of input alignment samtools view -s 0.5 -b sampleAligned.sortedByCoord.out.bam &gt; sample_downsampling.bam # Extract the alignment of housekeeping gene. bedtools intersect -a sample_downsampling.bam -b housekeeping_refseqGenes.bed &gt; sample_downsampling_housekeeping.bam # index BAM samtools index sample_downsampling_housekeeping.bam &gt; sample_downsampling_housekeeping.bam.bai 3.2.1 Quality metrics Transcript integrity number (TIN) is the most widely used measure RNA integrity, which is the percentage of transcripts that has uniform read coverage across the genome. RseQC calculated the TIN each transcripts and the median TIN score (medTIN) across all transcripts has is commonly used to indicate the RNA integrity and of each sample. Read distribution summarizes the fraction of reads aligned into different genomic regions, such as exon and intron regions. Gene body coverage shows the RNA-seq read coverage over the gene body. Junction saturation detects the splicing junctions with different resampling percentages of reads to determine if the sequencing depth is sufficient to perform alternative splicing analysis. Samples with low alignment fraction or low integrity or abnormal reads distribution usually have bad quality and should be removed in downstream analysis. 3.3 Gene quantification After the alignment of sequencing reads and quality check, we will quantify the gene or transcript expression from the BAM file.Both Salmon and RSEM are widely used for gene quantification. Salmon conducts fast transcript-level quantification, and RSEM performed both gene-level and transcript-level quantification. Salmon is usually faster and less memory-consuming than RSEM. Both tools generate transcripts per million (TPM), reads per kilobase of exon model per million reads (RPKM) and fragments per kilobase of exon model per million mapped reads (FPKM) expression, which is the normalized gene quantification that removing the effect of different gene length. In addition to TPM, HTSeq and STAR quantify gene expression according to mapped read counts. Both normalized gene expression and read counts can be used for differential expression analysis. 3.4 Batch effect removal Batch effects across samples is easily ignored but worth considering problems for immunotherapy cohort study. It is usually caused by unbalanced experimental design where estimation of group difference, and they are interdependent. To avoid the actual biology variation confounded by batch effect, Limma and Combat are common approaches to correct the batch effects. Limma uses a two-way ANOVA approach, while Combat uses the empirical Bayes approach, which is critical for small batches to avoid over-correction. For large batches, both methods should be similar. The sva R package integrates both methods for batch effect correction. To check whether the batch effect has been removed, principal components analysis (PCA) or unsupervised clustering before and after batch effect removal will be an excellent way to validate. To ensure a solid downstream RNA-seq analysis, it is essential to generate a gene expression profile mitigating the batch effect and group difference from a well-designed study. Example of PCA before and after batch effect between FT and FFPE samples: Figure 3.1: Before(left) and after(right) batch correction with Limma 3.5 Video demo of RIMA "],["Differential.html", "Chapter 4 Differential gene analysis", " Chapter 4 Differential gene analysis We describe our methods in this chapter. "],["Repertoire.html", "Chapter 5 Immune repertoire", " Chapter 5 Immune repertoire Some significant applications are demonstrated in this chapter. "],["Infiltration.html", "Chapter 6 Immune Infiltration 6.1 Cibersort 6.2 TIMER 6.3 quanTIseq 6.4 xCell 6.5 EPIC 6.6 MCP-counter 6.7 Comparison across cell type 6.8 Comparison across sample 6.9 Video demo", " Chapter 6 Immune Infiltration Cell infiltration estimation in the tumor microenvironment TME is a complicated system consisting of tumor cells, immune cells, stromal cells, and extracellular factors. Estimating cell components is essential for classifying the distinct tumor immune microenvironment (TIME) phenotype. Furthermore, dissecting the TIME by evaluating cell components plays a significant role in untangling the mechanism of tumor progression and immune evasion, which is essential for providing a guideline for immunotherapy selection. There are two major approaches for estimating cell infiltration in TME, deconvolution-based and marker-based approaches. The deconvolution-based method infers cell type fractions from the bulk gene expression of a given list of signature genes, such as TIMER, quanTIseq, EPIC, and CIBERSORT. The marker-based approaches to quantify the enrichment score utilizing a list of cell-specific marker genes, such as xCell and MCP-counter. ImmuneDeconv is an R package that integrated these six methods. All six algorithms estimate cell infiltration of immune cells and stromal cells, while EPIC and quanTIseq make it available to assess uncharacterized cells defined as cancer cells. Of note, CIBERSORT absolute mode, EPIC, and quanTIseq support inter-comparison between sample groups and intra-comparison between cell types. And TIMER, xCell, and MCP-counter support only inter-comparison between sample groups for one cell type. Immune cell deconvolution is still an open question in the field, and different algorithms could give slightly different results. Each algorithm estimates one general cell type or specific cell subtype. The best way is to focus on the observations consistently predicted by various algorithms, in which case the gold standard is not available. 6.1 Cibersort CIBERSORT is a deconvolution-based method that uses the v-support vector regression method (v-SVR) to estimate each immune cell type’s relative proportion from gene expression profile (GEP). It requires an input of reference gene expression signatures. CIBERSORT provided a gene signature matrix (LM22.txt) which contains 547 genes distinguish 7 T-cell types, naïve and memory B cells, plasma cell, and NK cells. The CIBERSORT absolute mode scales cellular fraction to a score that reflects each cell type’s absolute proportion, allowing comparison across both samples and cell types. The CIBERSORT source code and LM22 signature matrix are only freely available to academic users, which can be applied through CIBERSORT website . To run CIBERSORT using ImmuneDeconv: #demo suppressMessages(library(immunedeconv)) #read gene expression matrix input &lt;- &quot;tpm_convertID.txt&quot; #load CIBERSORT source code and signiture matrix source(&quot;CIBERSORT.R&quot;) sig_matrix &lt;- &quot;LM22.txt&quot; #Run CIBERSORT abs #The number of permutation cibersort_perm = 100 #Quantile normalization of input mixture, default = FALSE for RNA-Seq data cibersort_qn = FALSE #whether to apply absolute mode in cibersort cibersort_abs = TRUE #sig.score = for each mixture sample, define S as the median expression,level of all genes in the signature matrix divided by the median expression level of all genes in the mixture. Multiple cell subset fractions by S. cibersort_abs_method = &quot;sig.score&quot; res_ciber &lt;- CIBERSORT(sig_matrix, input, perm = cibersort_perm, QN = cibersort_qn, absolute = cibersort_abs, abs_method = cibersort_abs_method) head(res_ciber,3) ## B cells naive B cells memory Plasma cells T cells CD8 ## SRR8281218 0.002023271 0.003060637 0.000000000 0.12297118 ## SRR8281219 0.010693087 0.000000000 0.001201108 0.38499197 ## SRR8281226 0.000000000 0.008281786 0.000000000 0.01442307 ## T cells CD4 naive T cells CD4 memory resting ## SRR8281218 0 0.14975225 ## SRR8281219 0 0.22216858 ## SRR8281226 0 0.08219228 ## T cells CD4 memory activated T cells follicular helper ## SRR8281218 0 0.08924869 ## SRR8281219 0 0.16924345 ## SRR8281226 0 0.06671124 ## T cells regulatory (Tregs) T cells gamma delta NK cells resting ## SRR8281218 0.09617560 0 0.06763887 ## SRR8281219 0.00000000 0 0.00000000 ## SRR8281226 0.04296535 0 0.07211706 ## NK cells activated Monocytes Macrophages M0 Macrophages M1 ## SRR8281218 0.0000000 0.06195550 0.0000000 0.01550602 ## SRR8281219 0.1076938 0.03659288 0.1552708 0.03207925 ## SRR8281226 0.0357515 0.41486727 0.0000000 0.00000000 ## Macrophages M2 Dendritic cells resting Dendritic cells activated ## SRR8281218 0.7049077 0 0.000000000 ## SRR8281219 1.1589577 0 0.000000000 ## SRR8281226 0.6474766 0 0.004669831 ## Mast cells resting Mast cells activated Eosinophils Neutrophils ## SRR8281218 0.11994310 0 0.003766691 0.00000000 ## SRR8281219 0.24218289 0 0.000000000 0.07942792 ## SRR8281226 0.01289667 0 0.002926060 0.12361329 ## P-value Correlation RMSE Absolute score (sig.score) ## SRR8281218 0.06 0.15699314 1.027475 1.436950 ## SRR8281219 0.24 0.05195861 1.072383 2.600503 ## SRR8281226 0.07 0.13503937 1.054532 1.528892 6.2 TIMER TIMER uses linear least square regression to estimate six tumor-infiltrating immune cell types (B, CD4T, CD8T, neutrophils, macrophages, and dendritic cells). Since the tumor purity is very different across different cancer cell types, one of key steps is that TIMER selected the specific genes as immune signatures based on the correlation between gene expression and tumor purity. Tutorial of TIMER: Tutorial of TIMER2: Note that the TIMER score can only be compared within samples, and the current version of TIMER supports 23 different TCGA cancer types. #load gene expression matrix df &lt;- read.table(input, sep = &quot;,&quot;, row.names = 1, header = TRUE, check.names = FALSE) #The TCGA cancer acronyms of demo data cancertype &lt;- &quot;GBM&quot; #Available cancer type immunedeconv::timer_available_cancers res_timer = as.data.frame(deconvolute(df, &quot;timer&quot;,indications=rep(tolower(cancertype),ncol(df)))) 6.3 quanTIseq The quanTIseq uses constrained least square regression to estimate absolute proportions of 10 immune cell types infiltration levels from RNA seq data. Therefore, the score of quanTIseq allows inter- or intra-samples comparison. quanTIseq provides an entire pipeline that can either process the pre-computed gene expression matrix (TPM matrix) or directly analyze bulk RNA-Seq data. #Run quanTIseq res_quant = as.data.frame(deconvolute(df, &quot;quantiseq&quot;)) 6.4 xCell xCell performs single-sample gene set enrichment analysis (ssGSEA) on expression data to evaluate the enrichment of immune marker genes. These marker genes validated using cytometry immunophenotyping and in-silico simulations. Notes that results of xCell depend on the number of samples, the power of estimation might be lower if providing limited non-heterogeneous samples #Run xCell res_xcell = as.data.frame(deconvolute(df, &quot;xcell&quot;)) 6.5 EPIC EPIC uses constrained least square regression to estimate six immune cell types, fibroblasts, and endothelial cells. EPIC collects a unique gene expression reference from circulating and tumor-infiltrating cells. Further, it extended its algorithm to evaluate the uncharacterized cancer cell. The score that comes from the EPIC algorithm is the absolute value that can be compared within or across samples. #Run EPIC res_epic = as.data.frame(deconvolute(df, &quot;epic&quot;)) 6.6 MCP-counter MCP-counter uses its transcriptomic markers (TM) curated from 81 public datasets to estimate fibroblasts, endothelial, and eight immune cell types. The difference of mean log2-expression of marker genes samples is a key to evaluate the immune cell infiltration levels. #Run EPIC res_mcp = as.data.frame(deconvolute(df, &quot;mcp_counter&quot;)) 6.7 Comparison across cell type Using results from CIBERSORT abs mode as an example, we provide another two functions to do inter- or intra comparison. #extract the immune cell score from results of CIBERSORT res_ciber &lt;- res_ciber[,1:22] #load plotfunction source(&quot;plotfunction.R&quot;) #load metasheet for RIMA pipeline meta &lt;- read.csv(&quot;metasheet.csv&quot;) #methods: CIBERSORT, quanTIseq, EPIC, MCP, xCell, TIMER hmap(ta = res_ciber, meta = meta, methods = &quot;CIBERSORT&quot;, phenotype = &quot;Responder&quot;) 6.8 Comparison across sample boxfig(ta = res_ciber, meta = meta, methods = &quot;CIBERSORT&quot;, phenotype = &quot;Responder&quot;) 6.9 Video demo "],["Response.html", "Chapter 7 Immune Response 7.1 TIDE 7.2 Comparison between responders and non-reponders 7.3 Video demo", " Chapter 7 Immune Response Cancer immunotherapy utilizing immune checkpoint blockade (ICB) has gained excellent progression in treating advanced-stage patients. However, only a small fraction of patients achieved a response to the immunotherapy due to the complexity and heterogeneity of the TME. An increasing number of biomarkers have widely been used to estimate the clinical effectiveness of immunotherapy, such as ICB-related gene signatures (PD1, PDL1, CTLA4), tumor-infiltrating lymphocytes, tumor mutation burden, neoantigens, microsatellite instability (MSI), and serum markers. Nevertheless, there is an urgent need to build a method integrating the multiple dynamic factors to characterize TME and predict immunotherapy response. Currently, two major approaches have been effectively utilized in immunotherapy response prediction. One is models constructed using transcriptome expression profiles of immune checkpoint or T-cell activity, and the other one is artificial intelligence-based algorithms using imaging characteristics of lesions. For tumor RNA-seq data, TIDE models tumor immune evasion by combining gene signatures estimating T cell dysfunction and exclusion to predict ICB response, which may provide critical insights to guide clinical treatment. This computational framework computes the TIDE score for tumors and separates them into responders and non-responders. In detail, TIDE provides T cell dysfunction score, T cell exclusion score, cytotoxic T lymphocyte score, and scores of cell types restricting T cell infiltration in TME, including cancer-associated fibroblasts (CAF), myeloid-derived suppressor cells (MDSC), and M2 macrophages. These metrics scores help the biologists understand the TME status or T cell functions of interest. In this case, tumor RNA-seq profiling leverages the power of gene signature expression for quantifying the dynamic TME status, providing guidance of immunotherapy response prediction for clinicians. 7.1 TIDE TIDE as a transcriptome biomarker of ICB response by modeling tumor immune dysfunction and exclusion. The statistical model of TIDE was trained on clinical tumor profiles without ICB treatments since the immune evasion mechanisms in treatment naïve tumors are also likely to influence patient response to immunotherapies. The TIDE model has been applied to evaluate T cell dysfunction and exclusion signatures across over 33K samples in 188 tumor cohorts from well-curated databases, including TCGA, METABRIC, and PRECOG, as well as our in-house collections. 7.1.1 Cold and hot tumors TIDE estimate the cytotoxic T Lymphocyte (CTL) level in tumor from the average expression of CD8A, CD8B, GZM, GZMB and PRF1 from treatment naïve tumors. ‘Hot tumors’ have above-average CTL values among all samples, while ‘Cold tumors’ have CTL values below average. TIDE score is the combination of T cell dysfunction estimated from hot tumors and T cell exclusion estimated from cold tumors. 7.1.2 T cell dysfunction For hot tumors with high CTL values, the T cell dysfunction is modeled from Cox-PH repression in TIDE: \\[ Harzard = a*CTL+b*P+d*CTL*P \\] Where the variable CTL represents the CTLs levels, P represents the status of candidate genes and the coefficient d reflects the effect of interaction between CTL and candidate gene P on dealth harzard. The T cell dysfunction score of individual tumor is calcaulted as: \\[ Dysfunction = \\frac{d}{StdErr(d)} \\] 7.1.3 T cell exclusion For hot tumors with high CTL values, TIDE calculates T cell exclusion score to estimate the immune escape. The T cell exlclusion score is the average expression profile from cancer-associated fibroblasts (CAFs), myeloid-derived suppressor cells (MDSCs) and tumor-associated macrophages (TAMs), which are reported to restrict T cell infiltration in tumor. 7.1.4 Microsatelite instability (MSI) Microsatelite instability (MSI) is the condition of genetic hypermutability (predisposition to mutation) that results from impaired DNA mismatch repair (MMR). Previous study shows that the MSI is highly associated with tumor mutation burden and closly related to immunothrapy response. Many tools MANTIS, MSIsensor, mSINGS, MSIsensor-pro are available to calcualte MSI score form RNA-seq data. in our RIMA pipeline, we applied MSIsensor2 to estimate MSI score, which allows tumor-only BAM input. #Run MSIsensor2 msisensor2 msi -M models_hg38 -t tumor.bam -o tumor ## Output of MSIsensor2 Total_Number_of_Sites Number_of_Somatic_Sites % 156 26 16.67 7.2 Comparison between responders and non-reponders 7.3 Video demo #HLA Calling {#HLA} "],["Neoantigen.html", "Chapter 8 Neoantigen Analysis 8.1 HLA calling 8.2 Somatic mutation 8.3 Neoantigen identification", " Chapter 8 Neoantigen Analysis 8.1 HLA calling 8.2 Somatic mutation 8.3 Neoantigen identification "],["fusion.html", "Chapter 9 Fusion 9.1 Fusion calling from CHIMERIC 9.2 Remove homolog 9.3 Comparison", " Chapter 9 Fusion 9.1 Fusion calling from CHIMERIC 9.2 Remove homolog 9.3 Comparison #Microbiome {#microbiome} "]]
